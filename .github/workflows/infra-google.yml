# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  workflow_call:  
  workflow_dispatch:

env:
  PAYMENTS_SERVICE: ${{ vars.PAYMENTS_SERVICE }}
  PAYMENTS_API_VERSION: ${{ vars.PAYMENTS_API_VERSION }}
  PROJECT_ID: ${{ vars.GKE_PROJECT }}
  GAR_LOCATION: ${{ vars.GAR_LOCATION }} # us-central1 TODO:  update region of the Artifact Registry
  GKE_CLUSTER: ${{ vars.GKE_CLUSTER }}    # cluster-1  TODO: update to cluster name 
  GKE_ZONE: ${{ vars.GKE_ZONE }}  # us-central1-c TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
  REPOSITORY: samples # TODO: update to Artifact Registry docker repository
  IMAGE: static-site
  PAYMENTS_URI: 0.0.0.0

permissions:
  contents: 'read'
  id-token: 'write' # Adicionando a permissï¿½o correta aqui
jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
    
    # Get GKE Terraform Project
    - name: Get GKE Terraform Project
      run: git clone https://github.com/devair/gke-autopilot.git           
    
    # Run Terraform install  
    - name: Terraform install
      uses: hashicorp/setup-terraform@v2.0.3  
    
    # Run Terraform configure
    - name: Terraform configure
      run: terraform -chdir=gke-autopilot init -reconfigure  
    
    # Run Terraform configure    
    - name: Terraform apply
      run: terraform -chdir=gke-autopilot apply -var="project_id=${{ env.PROJECT_ID }}" -var="region=${{ env.GAR_LOCATION }}" -var="postgres_database=${{ secrets.DBNAME }}" -var="postgres_root_password=${{ secrets.DBROOTPASSWORD }}" -var="postgres_username=${{ secrets.DBUSER }}" -var="postgres_password=${{ secrets.DBPASSWORD }}"  -no-color -input=false -auto-approve
    
    - id: 'DB_IP'
      name: Database Ip
      run: echo "$(terraform -chdir=gke-autopilot output -raw postgres_ip_address)"
          
    
    - name: GKE Install
      uses: "google-github-actions/setup-gcloud@v2"
      with:
        install_components: "gke-gcloud-auth-plugin"

    - name: Authenticate to GKE cluster
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GAR_LOCATION }}

    - name: Kubernetes Deploy
      run: | 
        git clone https://github.com/devair/app-kubernetes.git
        kubectl apply -f app-kubernetes/ms-payments-deployment.yaml

    - name: Get payments service location      
      run: | 
        ORDERS_URI=$(kubectl get service/${{ env.PAYMENTS_SERVICE }}  -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "PAYMENTS_URI=$PAYMENTS_URI" >> $GITHUB_ENV
        echo {{ env.PAYMENTS_URI }}
    
    - name: Create secrets
      run: |      
    	  kubectl delete secret payment-port --ignore-not-found
    	  kubectl create secret generic payment-port --from-literal=port=${{ secrets.APP_PORT}}    
    	  kubectl delete secret payment-database --ignore-not-found
    	  kubectl create secret generic payment-database --from-literal=database=${{ secrets.DB_DATABASE}}
    	  kubectl delete secret payment-mongo-uri  --ignore-not-found
    	  kubectl create secret generic payment-mongo-uri --from-literal=mongo-uri${{ secrets.MONGO_URI}}






